#include <iostream>
using namespace std;

// Function to find the integer part of the square root using binary search
long long int sqrtInteger(int n) {
    int ans = -1;
    for (int s = 0, e = n, mid; s <= e; mid = s + (e - s) / 2) {
        long long int square = 1LL * mid * mid;

        if (square == n) {
            return mid; // Exact square root found
        }
        if (square < n) {
            ans = mid;   // Update potential answer
            s = mid + 1; // Narrow search range to upper half
        } else {
            e = mid - 1; // Narrow search range to lower half
        }
    }
    return ans; // Largest integer such that ans^2 â‰¤ n
}

// Function to refine the square root result to the desired precision
double morePrecision(int n, int precision, int tempSol) {
    double factor = 1;
    double ans = tempSol;

    for (int i = 0; i < precision; i++) {
        factor /= 10; // Decrease step size for precision level
        for (double j = ans; j * j < n; j += factor) {
            ans = j; // Update answer as long as square is less than n
        }
    }
    return ans;
}

int main() {
    int n;
    cout << "Enter the number: ";
    cin >> n;

    int tempSol = sqrtInteger(n); // Get integer part of square root
    double result = morePrecision(n, 3, tempSol); // Refine with precision
    cout << "Square root is: " << result << endl;

    return 0;
}
